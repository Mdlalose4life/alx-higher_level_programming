The ``0-add_integer`` module
======================

Using ``add_integer``
-------------------

Importing the function from the module:
	>>> add_integer = __import__("0-add_integer").add_integer

Testing for module docstring:
	 >>> m = __import__("0-add_integer").__doc__
	 >>> len(m) > 1
	 True

Testing for function docstring:
	 >>> f = __import__("0-add_integer").add_integer.__doc__
         >>> len(f) > 1
         True

Testing positive numbers addition:
	 >>> add_integer(7, 5)
	 12

Testing one positive negative number:
	 >>> add_integer(4, -8)
	 -4

Testing one negative with positive:
	 >>> add_integer(9, -5)
	 4

Testing addition over multiple values:
	 >>> [add_integer(i, i ** 2) for i in range(6)]
	 [0, 2, 6, 12, 20, 30]

Testing float with int:
	 >>> add_integer(3.5, 5)
	 8

Testing int with float:
	 >>> add_integer(13, 2.5)
	 15

Testing both float:
	 >>> add_integer(7.3, 1.5)
	 8

Testing for passed NaN:
	 >>> add_integer(1, float('nan'))
	 Traceback (most recent call last):
	 ...
	 ValueError: cannot convert float NaN to integer

Testing for passed inf:
	 >>> add_integer(1, float('inf'))
	 Traceback (most recent call last):
	 ...
	 OverflowError: cannot convert float infinity to integer

Testing super long int:
	 >>> add_integer(999999999999999999999999999999, 1)
	 1000000000000000000000000000000

Testing a list with number:
	 >>> add_integer([7], 2)
	 Traceback (most recent call last):
	 ...
	 TypeError: a must be an integer

Testing number with string:
	 >>> add_integer(12, "8")
	 Traceback (most recent call last):
	 ...
	 TypeError: b must be an integer

Testing library with non-number:
	 >>> add_integer((2,), {"key": "value"})
         Traceback (most recent call last):
         ...
         TypeError: a must be an integer

Testing bool with number:
	 >>> add_integer(False, 99)
	 Traceback (most recent call last):
         ...
         TypeError: a must be an integer

Testing number with bool:
	 >>> add_integer(2, true)
         Traceback (most recent call last):
         ...
         TypeError: b must be an integer

Testing for no args:
	 >>> add_integer()
	 Traceback (most recent call last):
	 ...
	 TypeError: add_integer() missing 2 required positional arguments: 'a' and 'b'

Testing for one arg:
	 >>> add_integer(1)
	 Traceback (most recent call last):
         ...
	 TypeError: add_integer() missing 1 required positional argument: 'b'

Testing more than 2 args:
	 >>> add_integer(4, 5, 6)
         Traceback (most recent call last):
         ...
         TypeError: add_integer() takes 2 positional arguments but 3 were given
