The ``3-say_my_name`` module
======================

Using ``say_my_name``
-------------------

Importing the function from the module:
	>>> say_my_name = __import__("3-say_my_name").say_my_name

Testing for module docstring:
	 >>> m = __import__("3-say_my_name").__doc__
	 >>> len(m) > 1
	 True

Testing for function docstring:
	 >>> f = __import__("3-say_my_name").say_my_name.__doc__
         >>> len(f) > 1
         True

Testing for passing None as first name:
	 >>> say_my_name(None, "one")
	 Traceback (most recent call last):
         ...
         TypeError: first_name must be a string

Testing for passing None as last name:
	 >>> say_my_name("one", None)
	 Traceback (most recent call last):
         ...
         TypeError: last_name must be a string

Testing for wrong type as first name:
         >>> say_my_name(1, "one")
         Traceback (most recent call last):
         ...
         TypeError: first_name must be a string

Testing for wrong type as last name:
         >>> say_my_name("one", [4])
         Traceback (most recent call last):
         ...
         TypeError: last_name must be a string

Testing for normal use:
	 >>> say_my_name("Sbu", "Zondo")
	 My name is Sbu Zondo
	 >>> say_my_name("You know nothing", "John Snow")
	 My name is You know nothing John Snow

Testing for 1 arg:
	 >>> say_my_name("one")
	 My name is one 

Testing for more than 2 args:
	 >>> say_my_name("One", "Two", "Three")
	 Traceback (most recent call last):
	 ...
	 TypeError: say_my_name() takes from 1 to 2 positional arguments but 3 were given
